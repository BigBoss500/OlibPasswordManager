<Application x:Class="OlibKey.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             mc:Ignorable="d"
             xmlns:core="clr-namespace:OlibKey.Core"
             DispatcherUnhandledException="WriteLog">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Localization/lang.xaml" />
                <ResourceDictionary Source="/IconsAndImages/Icons.xaml"/>
                <ResourceDictionary Source="/Themes/Light.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            
            <core:InvertEffect x:Key="WhiteIcon"/>

            <ContextMenu x:Key="TextBoxContextMenu">
                <MenuItem Command="ApplicationCommands.Cut" />
                <MenuItem Command="ApplicationCommands.Copy" />
                <MenuItem Command="ApplicationCommands.Paste" />
            </ContextMenu>

            <Style x:Key="ElementsBorderStyle" TargetType="{x:Type Border}">
                <Setter Property="Background" Value="{DynamicResource BackgroundWindow}"/>
                <Setter Property="CornerRadius" Value="5"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="BorderBrush" Value="{DynamicResource PageBordersColor}"/>
                <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
                <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled"/>
            </Style>

            <Style TargetType="{x:Type ProgressBar}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ProgressBar}">
                            <Grid MinHeight="14"
                                  MinWidth="200"
                                  Background="Transparent">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualState x:Name="Determinate" />
                                        <VisualState x:Name="Indeterminate">
                                            <Storyboard>
                                                <ObjectAnimationUsingKeyFrames Duration="00:01:00"
                                                                               Storyboard.TargetName="PART_Indicator"
                                                                               Storyboard.TargetProperty="Background">
                                                    <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                        <DiscreteObjectKeyFrame.Value>
                                                            <SolidColorBrush>Transparent</SolidColorBrush>
                                                        </DiscreteObjectKeyFrame.Value>
                                                    </DiscreteObjectKeyFrame>
                                                </ObjectAnimationUsingKeyFrames>

                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Border x:Name="PART_Track"
                                        CornerRadius="5"
                                        BorderThickness="1"
                                        SnapsToDevicePixels="True"
                                        BorderBrush="{DynamicResource BorderColorWindow}">
                                </Border>
                                <Border x:Name="PART_Indicator"
                                        CornerRadius="5"
                                        BorderThickness="1"
                                        HorizontalAlignment="Left"
                                        SnapsToDevicePixels="True"
                                        Background="{TemplateBinding Foreground}"
                                        />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="FocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle Margin="2" StrokeDashArray="1 2" SnapsToDevicePixels="true" StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}"/>
                <Setter Property="Background" Value="{DynamicResource BackgroundWindow}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BorderColorWindow}"/>
                <Setter Property="Foreground" Value="{DynamicResource ForegroundWindow}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="10,1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" CornerRadius="5" TextOptions.TextFormattingMode="Display"
                                RenderOptions.ClearTypeHint="Enabled" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource HoverBackground}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="#931d60" />
                                    <Setter Property="TextElement.Foreground" Value="White"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type ContextMenu}">
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Grid.IsSharedSizeScope" Value="true" />
                <Setter Property="HasDropShadow" Value="True" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ContextMenu}">
                            <Border x:Name="Border" Background="{DynamicResource BackgroundWindow}" TextOptions.TextFormattingMode="Display"
                                RenderOptions.ClearTypeHint="Enabled" BorderThickness="1" BorderBrush="{DynamicResource HoverBackground}" >
                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="HasDropShadow" Value="true">
                                    <Setter TargetName="Border" Property="Padding" Value="0,3,0,3" />
                                    <Setter TargetName="Border" Property="CornerRadius" Value="5" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ButtonHeight" TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}"/>
                <Setter Property="Background" Value="{DynamicResource BackgroundWindow}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BorderColorWindow}"/>
                <Setter Property="Foreground" Value="{DynamicResource ForegroundWindow}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="10,1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" CornerRadius="4.5" Background="{TemplateBinding Background}" BorderThickness="0" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource HoverBackground}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="#931d60" />
                                    <Setter Property="Effect" TargetName="contentPresenter" Value="{DynamicResource WhiteIcon}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>



            <Style TargetType="{x:Type TextBox}">
                <Setter Property="Foreground" Value="{DynamicResource ForegroundWindow}"/>
                <Setter Property="ContextMenu" Value="{DynamicResource TextBoxContextMenu}"/>
                <Setter Property="CaretBrush" Value="{DynamicResource ForegroundWindow}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                            <Border x:Name="border" BorderThickness="1" CornerRadius="5" TextOptions.TextFormattingMode="Display"
                                RenderOptions.ClearTypeHint="Enabled" Background="{DynamicResource BackgroundWindow}" BorderBrush="{DynamicResource BorderColorWindow}"
                                    SnapsToDevicePixels="True">
                                <ScrollViewer x:Name="PART_ContentHost" Focusable="false"
                                              HorizontalScrollBarVisibility="Hidden"
                                              VerticalScrollBarVisibility="Hidden" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="#931d60" />
                                </Trigger>
                                <Trigger Property="IsKeyboardFocused" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="#931d60" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                            <Condition Property="IsSelectionActive" Value="false" />
                        </MultiTrigger.Conditions>
                        <Setter Property="SelectionBrush"
                                Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
                    </MultiTrigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="{x:Type PasswordBox}">
                <Setter Property="CaretBrush" Value="{DynamicResource ForegroundWindow}"/>
                <Setter Property="ContextMenu" Value="{DynamicResource TextBoxContextMenu}"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                <Setter Property="Foreground" Value="{DynamicResource ForegroundWindow}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type PasswordBox}">
                            <Border x:Name="border" BorderThickness="1" CornerRadius="5" TextOptions.TextFormattingMode="Display" SnapsToDevicePixels="True"
                                RenderOptions.ClearTypeHint="Enabled" Background="{DynamicResource BackgroundWindow}" BorderBrush="{DynamicResource BorderColorWindow}">
                                <ScrollViewer x:Name="PART_ContentHost" Focusable="false"
                                              HorizontalScrollBarVisibility="Hidden"
                                              VerticalScrollBarVisibility="Hidden" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Opacity" TargetName="border" Value="0.56" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="#931d60" />
                                </Trigger>
                                <Trigger Property="IsKeyboardFocused" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="#931d60" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                            <Condition Property="IsSelectionActive" Value="false" />
                        </MultiTrigger.Conditions>
                        <Setter Property="SelectionBrush"
                                Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
                    </MultiTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="OptionMarkFocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle Margin="14,0,0,0" StrokeDashArray="1 2" SnapsToDevicePixels="true" StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type RadioButton}">
                <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}"/>
                <Setter Property="Foreground" Value="{DynamicResource ForegroundWindow}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RadioButton}">
                            <Border x:Name="radioButtonBorder" Background="Transparent" Padding="0,2" BorderThickness="0" TextOptions.TextFormattingMode="Display"
                                RenderOptions.ClearTypeHint="Enabled" SnapsToDevicePixels="true" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="5"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <Border x:Name="Bd2" Background="Transparent"/>
                                        <ContentPresenter Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </Grid>
                                </Border>
                                <ControlTemplate.Triggers>
                                <Trigger Property="HasContent" Value="true">
                                    <Setter Property="FocusVisualStyle" Value="{DynamicResource OptionMarkFocusVisual}"/>
                                    <Setter Property="Padding" Value="4,-1,0,0"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="radioButtonBorder" Value="{DynamicResource HoverBackground}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="radioButtonBorder" Value="{DynamicResource HoverBackground}"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Background" TargetName="radioButtonBorder" Value="{DynamicResource HoverBackground}"/>
                                    <Setter Property="Background" TargetName="Bd2" Value="#931d60"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="{x:Null}">
                                    <Setter Property="Background" TargetName="Bd2" Value="Transparent"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type ListBoxItem}">
                <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Border x:Name="Bd" Background="Transparent" SnapsToDevicePixels="true" TextOptions.TextFormattingMode="Display"
                                RenderOptions.ClearTypeHint="Enabled">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="5"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Border x:Name="Bd2" Background="Transparent"/>
                                    <ContentPresenter Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource HoverBackground}"/>
                                    <Setter Property="Background" TargetName="Bd2" Value="{DynamicResource HoverBackground}"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                        <Condition Property="IsSelected" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource HoverBackground}"/>
                                    <Setter Property="Background" TargetName="Bd2" Value="#931d60"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                        <Condition Property="IsSelected" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource HoverBackground}"/>
                                    <Setter Property="Background" TargetName="Bd2" Value="#931d60"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type MenuItem}">
                <Setter Property="Foreground" Value="{DynamicResource ForegroundWindow}"/>
                <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
                <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <Border x:Name="Border"
                                    Background="{DynamicResource BackgroundWindow}"
                                    CornerRadius="5"
                                    BorderThickness="0">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition x:Name="Col0" MinWidth="45" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                        <ColumnDefinition x:Name="Col3" Width="14"/>
                                    </Grid.ColumnDefinitions>

                                    <ContentPresenter Grid.Column="0" Margin="0,0,15,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>

                                    <Grid Grid.Column="0" Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                        <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{DynamicResource BackgroundWindow}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
                                    </Grid>
                                    
                                    <ContentPresenter Grid.Column="1"
                                          Margin="{TemplateBinding Padding}"
                                          x:Name="HeaderHost"
                                          RecognizesAccessKey="True"
                                          ContentSource="Header"/>

                                    <ContentPresenter Grid.Column="2"
                                          Margin="8,1,8,1"
                                          x:Name="IGTHost"
                                          ContentSource="InputGestureText"
                                          VerticalAlignment="Center"/>

                                    <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center" >
                                        <Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{DynamicResource BackgroundWindow}" Data="M0,0 L0,8 L4,4 z"/>
                                    </Grid>

                                    <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" AllowsTransparency="true" HorizontalOffset="1" Placement="Right" x:Name="SubMenuPopup" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                        <Border x:Name="SubMenuBorder" BorderBrush="{DynamicResource HoverBackground}" Background="{DynamicResource BackgroundWindow}" BorderThickness="1" CornerRadius="5" Padding="2" Margin="5">
                                            <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                            </Grid>
                                        </Border>
                                    </Popup>
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="Role" Value="TopLevelHeader">
                                    <Setter Property="Padding" Value="6,1,6,1"/>
                                    <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                                    <Setter Property="MinWidth" Value="0" TargetName="Col0"/>
                                    <Setter Property="Width" Value="Auto" TargetName="Col3"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                                </Trigger>

                                <Trigger Property="Role" Value="TopLevelItem">
                                    <Setter Property="Padding" Value="6,1,6,1"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                                </Trigger>
                                <Trigger Property="Role" Value="SubmenuHeader">
                                    <Setter Property="DockPanel.Dock" Value="Top"/>
                                    <Setter Property="Padding" Value="0,2,0,2"/>
                                </Trigger>
                                <Trigger Property="Role" Value="SubmenuItem">
                                    <Setter Property="DockPanel.Dock" Value="Top"/>
                                    <Setter Property="Padding" Value="0,2,0,2"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                                </Trigger>
                                <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                                    <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                                </Trigger>
                                <Trigger Property="Icon" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                                </Trigger>

                                <Trigger Property="IsHighlighted" Value="true">
                                    <Setter Property="Background" Value="{DynamicResource HoverBackground}" TargetName="Border"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource ForegroundOpacity}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
